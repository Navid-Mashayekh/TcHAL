<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="CoE_property_handler" Id="{0f90cda2-01ac-0568-2617-d7ad811e297b}" SpecialFunc="None">
    <Declaration><![CDATA[(**
This function bock handles ADS read and write requests.
To read or write an ADS property pass an object compliant to the "I_CoE_property" interface through the "add_read_request" or "add_write_request" method.
All requests will be added to an internal read or write buffer and executed one by one.
The object will be updated through the call be interface when the read or write process is done.
*)
FUNCTION_BLOCK CoE_property_handler IMPLEMENTS I_CoE_property_handler
VAR_INPUT
	amsNetId	: T_AmsNetId;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// ==  read  ================================== 
	done_reading_coe		: f_trig;
	CoE_property_to_read	: I_CoE_property;
	read_requests_table 	: ring_buffer_CoE_read; 
	
	coe_read 	: FB_EcCoESdoRead;	
	
	_readState		: INT;
	_executeRead	: BOOL;
	_readBuffer		: CoE_buffer_type_cast_union;
	
	// ==  write  ================================== 
	done_writing_coe		: f_trig;
	CoE_property_to_write	: I_CoE_property;
	write_requests_table 	: ring_buffer_CoE_read; 
	
	coe_write 	: FB_EcCoESdoWrite;	
	
	_writeState			: INT;
	_executeWrite		: BOOL;
	_writeBuffer		: CoE_buffer_type_cast_union;

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// ===========================
// handle read requests
// ===
CASE _readState OF 
	0:
		IF read_requests_table.read(data=> CoE_property_to_read)THEN 
			_executeRead := TRUE;
			_readState := 10;			
		END_IF

	10:
		IF done_reading_coe.q THEN
			CoE_property_to_read.handle_read_callback(pt_buffer:=ADR(_readBuffer), errId:=coe_read.nErrId);
			_executeRead:=FALSE;
			_readState := 0;
		END_IF
ELSE
	_readState := 0;
END_CASE

IF CoE_property_to_read <> 0 THEN
	coe_read(
		sNetId		:= amsNetId, 
		nSlaveAddr	:= CoE_property_to_read.SlaveAddress, 
		nSubIndex	:= CoE_property_to_read.SubIndex, 
		nIndex		:= CoE_property_to_read.Index, 
		pDstBuf		:= ADR(_readBuffer._values), 
		cbBufLen	:= SIZEOF(_readBuffer._values), 
		bExecute	:= _executeRead, 
		tTimeout	:= , 
		bBusy		=> , 
		bError		=> , 
		nErrId		=> , 
		cbRead		=> );
		
	done_reading_coe(clk:=coe_read.bBusy);
END_IF


// ===========================
// hadndle write requests
// ===
CASE _writeState OF 
	0:
		IF write_requests_table.read(data=> CoE_property_to_write) THEN 
			_writeBuffer := CoE_property_to_write.valueToWrite;
			_executeWrite := TRUE;
			_writeState := 10;			
		END_IF

	10:
		IF done_writing_coe.q THEN
			CoE_property_to_write.handle_write_callback(errId:=coe_write.nErrId);
			_executeWrite:=FALSE;
			_writeState := 0;
		END_IF
ELSE
	_readState := 0;
END_CASE

IF CoE_property_to_write <> 0 THEN
	coe_write(
		sNetId		:= amsNetId, 
		nSlaveAddr	:= CoE_property_to_write.SlaveAddress, 
		nSubIndex	:= CoE_property_to_write.SubIndex, 
		nIndex		:= CoE_property_to_write.Index, 
		pSrcBuf		:= ADR(_writeBuffer._values), 
		cbBufLen	:= CoE_property_to_write.dataTypeSize, 
		bExecute	:= _executeWrite, 
		tTimeout	:= , 
		bBusy		=> , 
		bError		=> , 
		nErrId		=> );
		
	done_writing_coe(clk:=coe_write.bBusy);
END_IF
// ===========================]]></ST>
    </Implementation>
    <Method Name="add_read_request" Id="{5e9e3f3d-6410-04bb-3054-71a36ec9f3e8}">
      <Declaration><![CDATA[METHOD add_read_request : BOOL
VAR_INPUT
	request	: I_CoE_property;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF request <> 0 THEN
	add_read_request:= THIS^.read_requests_table.write(request);
ELSE
	add_read_request:=FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="add_write_request" Id="{a18613e8-2d23-014b-058f-935c7b0bd42d}">
      <Declaration><![CDATA[METHOD add_write_request : BOOL
VAR_INPUT
	request	: I_CoE_property;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF request <> 0 THEN
	add_write_request:= THIS^.write_requests_table.write(request);
ELSE
	add_write_request:=FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>