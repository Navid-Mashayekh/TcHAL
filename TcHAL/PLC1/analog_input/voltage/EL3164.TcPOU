<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="EL3164" Id="{c0564d87-5ca1-0756-3a25-5787154406d7}" SpecialFunc="None">
    <Declaration><![CDATA[(**
This function block abstracts the Beckhoff EtherCAT terminal EL3164 (0…10 V, 16 Bit)
*)
FUNCTION_BLOCK EL3164 EXTENDS CoE_TerminalBase IMPLEMENTS I_terminal_execution
VAR_INPUT
END_VAR
VAR_OUTPUT
	AI_Voltage_channel_1 		: I_AI_Voltage :=_channel_1;
	AI_Voltage_channel_2 		: I_AI_Voltage :=_channel_2;
	AI_Voltage_channel_3 		: I_AI_Voltage :=_channel_3;
	AI_Voltage_channel_4 		: I_AI_Voltage :=_channel_4;
	AI_percent_channe_1			: I_AI_percentage := _channel_1;
	AI_percent_channe_2			: I_AI_percentage := _channel_2;
	AI_percent_channe_3			: I_AI_percentage := _channel_3;
	AI_percent_channe_4			: I_AI_percentage := _channel_4;
END_VAR
VAR
// == IO Mapping ==============================================================
// The channel status Limits 1 and 2 have to be defined as BYTE since they are 
// of BIT2 in the terminal, but there is no such datatype in the PLC.

	WcState_WcState			AT%I*: BOOL;
	InfoData_State			AT%I*: UINT;
	InfoData_AdsAddr_netId  AT%I*: AMSNETID;
	InfoData_AdsAddr_port 	AT%I*: WORD;
	
	// Channel 1
	AI_Standard_Channel_1_Value        			AT%I*: INT;	
	AI_Standard_Channel_1_Status_Underrange   	AT%I*: BOOL;
	AI_Standard_Channel_1_Status_Overrange   	AT%I*: BOOL;
	AI_Standard_Channel_1_Status_Limit_1   		AT%I*: BYTE;
	AI_Standard_Channel_1_Status_Limit_2   		AT%I*: BYTE;
	AI_Standard_Channel_1_Status_Error   		AT%I*: BOOL;
	AI_Standard_Channel_1_Status_Sync_error   	AT%I*: BOOL;
	AI_Standard_Channel_1_Status_TxPDO_State   	AT%I*: BOOL;
	AI_Standard_Channel_1_Status_TxPDO_Toggle   AT%I*: BOOL;

	// Channel 2
	AI_Standard_Channel_2_Value        			AT%I*: INT;	
	AI_Standard_Channel_2_Status_Underrange   	AT%I*: BOOL;
	AI_Standard_Channel_2_Status_Overrange   	AT%I*: BOOL;
	AI_Standard_Channel_2_Status_Limit_1   		AT%I*: BYTE;
	AI_Standard_Channel_2_Status_Limit_2   		AT%I*: BYTE;
	AI_Standard_Channel_2_Status_Error   		AT%I*: BOOL;
	AI_Standard_Channel_2_Status_Sync_error   	AT%I*: BOOL;
	AI_Standard_Channel_2_Status_TxPDO_State   	AT%I*: BOOL;
	AI_Standard_Channel_2_Status_TxPDO_Toggle   AT%I*: BOOL;
	
	// Channel 3
	AI_Standard_Channel_3_Value        			AT%I*: INT;	
	AI_Standard_Channel_3_Status_Underrange   	AT%I*: BOOL;
	AI_Standard_Channel_3_Status_Overrange   	AT%I*: BOOL;
	AI_Standard_Channel_3_Status_Limit_1   		AT%I*: BYTE;
	AI_Standard_Channel_3_Status_Limit_2   		AT%I*: BYTE;
	AI_Standard_Channel_3_Status_Error   		AT%I*: BOOL;
	AI_Standard_Channel_3_Status_Sync_error   	AT%I*: BOOL;
	AI_Standard_Channel_3_Status_TxPDO_State   	AT%I*: BOOL;
	AI_Standard_Channel_3_Status_TxPDO_Toggle   AT%I*: BOOL;
	
	// Channel 4
	AI_Standard_Channel_4_Value        			AT%I*: INT;	
	AI_Standard_Channel_4_Status_Underrange   	AT%I*: BOOL;
	AI_Standard_Channel_4_Status_Overrange   	AT%I*: BOOL;
	AI_Standard_Channel_4_Status_Limit_1   		AT%I*: BYTE;  
	AI_Standard_Channel_4_Status_Limit_2   		AT%I*: BYTE;
	AI_Standard_Channel_4_Status_Error   		AT%I*: BOOL;
	AI_Standard_Channel_4_Status_Sync_error   	AT%I*: BOOL;
	AI_Standard_Channel_4_Status_TxPDO_State   	AT%I*: BOOL;
	AI_Standard_Channel_4_Status_TxPDO_Toggle   AT%I*: BOOL;
// ============================================================================

	_channel_1 : AI_Voltage_Channel(adc_min:=ADC_MIN, adc_max:=ADC_MAX, physical_min:=PHYSICAL_MIN, physical_max:=PHYSICAL_MAX, channel_number:=1);
	_channel_2 : AI_Voltage_Channel(adc_min:=ADC_MIN, adc_max:=ADC_MAX, physical_min:=PHYSICAL_MIN, physical_max:=PHYSICAL_MAX, channel_number:=2);
	_channel_3 : AI_Voltage_Channel(adc_min:=ADC_MIN, adc_max:=ADC_MAX, physical_min:=PHYSICAL_MIN, physical_max:=PHYSICAL_MAX, channel_number:=3);
	_channel_4 : AI_Voltage_Channel(adc_min:=ADC_MIN, adc_max:=ADC_MAX, physical_min:=PHYSICAL_MIN, physical_max:=PHYSICAL_MAX, channel_number:=4);
	
	_I_InterfaceManager : I_InterfaceManager;
	_terminal_name : STRING;
	reg_errId: HAL_ErrorEnum;
	_InitState: INT;
END_VAR
VAR CONSTANT
	ADC_MIN        	: INT:=0;
	ADC_MAX        	: INT:=32767;
	PHYSICAL_MIN 	: INT:=0;
	PHYSICAL_MAX 	: INT:=10;
	
    HARDWARE_REVSION : UINT:=19;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE _InitState OF 
	0:  // init parent
		IF SUPER^._init_done THEN
			_InitState := 5;
		END_IF 
		
	5: 
		IF NOT _I_InterfaceManager.register_terminal(terminal_name:=_terminal_name , errId=>reg_errId ) THEN
			RETURN;
		ELSE
			_InitState := 10;
		END_IF
	
	10: // register channel 1 percentage interface 
		IF _I_InterfaceManager.register_I_AI_Percentage(_channel_1, _terminal_name, channel_number := 1, errId=>reg_errId) THEN 
			_InitState := 20;
		END_IF
	20: // register channel 2 percentage interface 
		IF _I_InterfaceManager.register_I_AI_Percentage(_channel_2, _terminal_name, channel_number := 2, errId=>reg_errId) THEN 
			_InitState := 30;
		END_IF
		
	30: // register channel 3 percentage interface 
		IF _I_InterfaceManager.register_I_AI_Percentage(_channel_3, _terminal_name, channel_number := 3, errId=>reg_errId) THEN 
			_InitState := 40;
		END_IF
		
	40: // register channel 4 percentage interface 
		IF _I_InterfaceManager.register_I_AI_Percentage(_channel_4, _terminal_name, channel_number := 4, errId=>reg_errId) THEN 
			_InitState := 50;
		END_IF

	50: // register channel 1 voltage interface 
		IF _I_InterfaceManager.register_I_AI_Voltage(_channel_1, _terminal_name, channel_number := 1, errId=>reg_errId) THEN 
			_InitState := 60;
		END_IF
		
	60: // register channel 2 voltage interface 
		IF _I_InterfaceManager.register_I_AI_Voltage(_channel_2, _terminal_name, channel_number := 2, errId=>reg_errId) THEN 
			_InitState := 70;
		END_IF
		
	70: // register channel 3 voltage interface 
		IF _I_InterfaceManager.register_I_AI_Voltage(_channel_3, _terminal_name, channel_number := 3, errId=>reg_errId) THEN 
			_InitState := 80;
		END_IF
		
	80: // register channel 4 voltage interface 
		IF _I_InterfaceManager.register_I_AI_Voltage(_channel_4, _terminal_name, channel_number := 4, errId=>reg_errId) THEN 
			_InitState := 90;
		END_IF
ELSE
	// Channel 1
	_channel_1.wcState							:= NOT  WcState_WcState;
	_channel_1.terminal_address 				:= _terminal_address;	
	_channel_1.terminal_value 					:= AI_Standard_Channel_1_Value;
	_channel_1.io_status_Underrange 			:= AI_Standard_Channel_1_Status_Underrange;
	_channel_1.io_status_Overrange 				:= AI_Standard_Channel_1_Status_Overrange;
	_channel_1.io_status_Limit_1_greater_value 	:= AI_Standard_Channel_1_Status_Limit_1.0;
	_channel_1.io_status_Limit_1_smaller_value	:= AI_Standard_Channel_1_Status_Limit_1.1;
	_channel_1.io_status_Limit_2_greater_value 	:= AI_Standard_Channel_1_Status_Limit_2.0;
	_channel_1.io_status_Limit_2_smaller_value	:= AI_Standard_Channel_1_Status_Limit_2.1;
	_channel_1.io_status_Error 					:= AI_Standard_Channel_1_Status_Error;
	_channel_1.io_status_Sync_error 			:= AI_Standard_Channel_1_Status_Sync_error;
	_channel_1.io_status_TxPDO_State 			:= AI_Standard_Channel_1_Status_TxPDO_State;
	_channel_1.io_status_TxPDO_Toggle 			:= AI_Standard_Channel_1_Status_TxPDO_Toggle;
	
	// Channel 2
	_channel_2.wcState							:= NOT  WcState_WcState;
	_channel_2.terminal_address 				:= _terminal_address;	
	_channel_2.terminal_value 					:= AI_Standard_Channel_2_Value;
	_channel_2.io_status_Underrange 			:= AI_Standard_Channel_2_Status_Underrange;
	_channel_2.io_status_Overrange 				:= AI_Standard_Channel_2_Status_Overrange;
	_channel_2.io_status_Limit_1_greater_value 	:= AI_Standard_Channel_2_Status_Limit_1.0;
	_channel_2.io_status_Limit_1_smaller_value	:= AI_Standard_Channel_2_Status_Limit_1.1;
	_channel_2.io_status_Limit_2_greater_value 	:= AI_Standard_Channel_2_Status_Limit_2.0;
	_channel_2.io_status_Limit_2_smaller_value	:= AI_Standard_Channel_2_Status_Limit_2.1;
	_channel_2.io_status_Error 					:= AI_Standard_Channel_2_Status_Error;
	_channel_2.io_status_Sync_error 			:= AI_Standard_Channel_2_Status_Sync_error;
	_channel_2.io_status_TxPDO_State 			:= AI_Standard_Channel_2_Status_TxPDO_State;
	_channel_2.io_status_TxPDO_Toggle 			:= AI_Standard_Channel_2_Status_TxPDO_Toggle;

	// Channel 3
	_channel_3.wcState							:= NOT  WcState_WcState;
	_channel_3.terminal_address 				:= _terminal_address;	
	_channel_3.terminal_value 					:= AI_Standard_Channel_3_Value;
	_channel_3.io_status_Underrange 			:= AI_Standard_Channel_3_Status_Underrange;
	_channel_3.io_status_Overrange 				:= AI_Standard_Channel_3_Status_Overrange;
	_channel_3.io_status_Limit_1_greater_value 	:= AI_Standard_Channel_3_Status_Limit_1.0;
	_channel_3.io_status_Limit_1_smaller_value	:= AI_Standard_Channel_3_Status_Limit_1.1;
	_channel_3.io_status_Limit_2_greater_value 	:= AI_Standard_Channel_3_Status_Limit_2.0;
	_channel_3.io_status_Limit_2_smaller_value	:= AI_Standard_Channel_3_Status_Limit_2.1;
	_channel_3.io_status_Error 					:= AI_Standard_Channel_3_Status_Error;
	_channel_3.io_status_Sync_error 			:= AI_Standard_Channel_3_Status_Sync_error;
	_channel_3.io_status_TxPDO_State 			:= AI_Standard_Channel_3_Status_TxPDO_State;
	_channel_3.io_status_TxPDO_Toggle 			:= AI_Standard_Channel_3_Status_TxPDO_Toggle;

	// Channel 4
	_channel_4.wcState							:= NOT  WcState_WcState;
	_channel_4.terminal_address 				:= _terminal_address;	
	_channel_4.terminal_value 					:= AI_Standard_Channel_4_Value;
	_channel_4.io_status_Underrange 			:= AI_Standard_Channel_4_Status_Underrange;
	_channel_4.io_status_Overrange 				:= AI_Standard_Channel_4_Status_Overrange;
	_channel_4.io_status_Limit_1_greater_value 	:= AI_Standard_Channel_4_Status_Limit_1.0;
	_channel_4.io_status_Limit_1_smaller_value	:= AI_Standard_Channel_4_Status_Limit_1.1;
	_channel_4.io_status_Limit_2_greater_value 	:= AI_Standard_Channel_4_Status_Limit_2.0;
	_channel_4.io_status_Limit_2_smaller_value	:= AI_Standard_Channel_4_Status_Limit_2.1;
	_channel_4.io_status_Error 					:= AI_Standard_Channel_4_Status_Error;
	_channel_4.io_status_Sync_error 			:= AI_Standard_Channel_4_Status_Sync_error;
	_channel_4.io_status_TxPDO_State 			:= AI_Standard_Channel_4_Status_TxPDO_State;
	_channel_4.io_status_TxPDO_Toggle 			:= AI_Standard_Channel_4_Status_TxPDO_Toggle;	

	_channel_1();
	_channel_2();
	_channel_3();
	_channel_4();
END_CASE
]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{aecb8719-9041-0e64-3653-3fb17fc080fb}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	CoE_communication_handler: I_CoE_communication_handler;
	I_InterfaceManager : I_InterfaceManager;
	name : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^._CoE_communication_handler	:=CoE_communication_handler;
_channel_1.CoE_communication_handler	:=CoE_communication_handler;
_channel_2.CoE_communication_handler	:=CoE_communication_handler;
_channel_3.CoE_communication_handler	:=CoE_communication_handler;
_channel_4.CoE_communication_handler	:=CoE_communication_handler;
_I_InterfaceManager :=I_InterfaceManager;
_terminal_name := name;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="run" Id="{84eca7dc-4aab-0d2b-2f81-29bf16c3924d}">
      <Declaration><![CDATA[METHOD run : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^();
THIS^();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>